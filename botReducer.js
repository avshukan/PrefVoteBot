const { ACTIONS } = require('./action_types');
const { STATES } = require('./state_types');

const { DEEPLINK_TOKEN } = process.env;
const MOCK_MESSAGE = '–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ';

function botReducer(state = {}, action) {
  switch (action.type) {
    case ACTIONS.CREATE_VOTE: {
      const { userId } = action.payload;
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.CREATE_HEADER,
        reply: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞',
        buttons: ['‚ùå Cancel'],
      };
      return state;
    }

    case ACTIONS.CREATE_HEADER: {
      const {
        userId, questionId, header, userMessageId,
      } = action.payload;
      const reply = `–ó–∞–≥–æ–ª–æ–≤–æ–∫: <b>${header}</b>\n\n`
      + '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞';
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.CREATE_TEXT,
        questionId,
        header,
        clearMessagesQueue: [...(state[userId].clearMessagesQueue || []), userMessageId],
        reply,
        buttons: ['‚ùå Cancel'],
      };
      return state;
    }

    case ACTIONS.CREATE_TEXT: {
      const { userId, text, userMessageId } = action.payload;
      const reply = `–ó–∞–≥–æ–ª–æ–≤–æ–∫: <b>${state[userId].header}</b>\n`
      + `–í–æ–ø—Ä–æ—Å: ${text}\n\n`
      + '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞';
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.CREATE_OPTION,
        text,
        options: [],
        clearMessagesQueue: [...(state[userId].clearMessagesQueue || []), userMessageId],
        reply,
        buttons: ['‚ùå Cancel'],
      };
      return state;
    }

    case ACTIONS.CREATE_OPTION: {
      const { userId, option, userMessageId } = action.payload;
      const options = [...(state[userId].options || []), option];
      const defaultReply = `–ó–∞–≥–æ–ª–æ–≤–æ–∫: <b>${state[userId].header}</b>\n`
      + `–í–æ–ø—Ä–æ—Å: ${state[userId].text}\n`
      + '–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:';
      const reply = options.reduce((acc, item) => `${acc}\n - ${item}`, defaultReply);
      const buttons = (options.length > 1) ? ['‚úîÔ∏è Done', '‚ùå Cancel'] : ['‚ùå Cancel'];
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.CREATE_OPTION,
        options,
        clearMessagesQueue: [...(state[userId].clearMessagesQueue || []), userMessageId],
        reply: `${reply}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞`,
        buttons,
      };
      return state;
    }

    case ACTIONS.CAST_VOTE: {
      const {
        userId,
        questionId,
        header,
        text,
        options,
      } = action.payload;
      const reply = `<b>${header}</b>\n${text}`;
      const buttons = [...options.map((option) => option.Name), '‚ùå Cancel'];
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.ANSWER,
        questionId,
        header,
        text,
        options,
        optionsSelected: [],
        reply,
        buttons,
      };
      return state;
    }

    case ACTIONS.GET_OPTION: {
      const {
        userId,
        options,
        optionsSelected,
      } = action.payload;
      const { header, text } = state[userId];
      let reply;
      let buttons;
      if (options.length === 0) {
        reply = `–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å <b>${header}</b> \n–í–∞—à –≤—ã–±–æ—Ä:`;
        optionsSelected.forEach((option, index) => {
          reply += `\n${index + 1}. ${option.Name}`;
        });
        buttons = ['üëÅ Results'];
      } else {
        reply = `<b>${header}</b>\n${text}\n–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏:`;
        optionsSelected.forEach((option, index) => {
          reply += `\n${index + 1}. ${option.Name}`;
        });
        buttons = [...options.map((option) => option.Name), '‚ùå Cancel'];
      }
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.ANSWER,
        options,
        optionsSelected,
        reply,
        buttons,
      };
      return state;
    }

    case ACTIONS.GET_WRONG_OPTION: {
      const { userId, answer } = action.payload;
      const {
        header, text, options, optionsSelected,
      } = state[userId];
      const errorExplaination = optionsSelected.findIndex((optionSelected) => optionSelected.Name === answer) === -1
        ? `–∑–Ω–∞—á–µ–Ω–∏—è "<b>${answer}</b>" –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤`
        : `–∑–Ω–∞—á–µ–Ω–∏–µ "<b>${answer}</b>" —É–∂–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –≤–∞–º–∏`;
      const defaultReply = `–ü—Ä–æ—Å—Ç–∏—Ç–µ, ${errorExplaination}<b>\n`
        + `${header}</b>\n`
        + `${text}${optionsSelected.length === 0 ? '' : '\n–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏:'}`;
      const reply = optionsSelected.reduce((acc, selectedOption, index) => `${acc}\n${index + 1}. ${selectedOption.Name}`, defaultReply);
      const buttons = [...options.map((option) => option.Name), '‚ùå Cancel'];
      state[userId] = {
        ...state[userId],
        userId,
        type: STATES.ANSWER,
        reply,
        buttons,
      };
      return state;
    }

    case ACTIONS.HEARS_CANCEL: {
      const { userId } = action.payload;
      let reply = '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ';
      const type = state[userId] ? state[userId].type : STATES.DEFAULT;
      switch (type) {
        case STATES.CREATE_HEADER:
        case STATES.CREATE_TEXT:
        case STATES.CREATE_OPTION:
          reply = '–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ';
          break;
        case STATES.ANSWER:
          reply = '–£—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ';
          break;
      }
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.DEFAULT,
        reply,
        buttons: ['/new'],
      };
      return state;
    }

    case ACTIONS.HEARS_DONE: {
      const {
        userId, questionId, header, text, options,
      } = action.payload;
      const reply = `–û–ø—Ä–æ—Å <b>${header}</b> —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\n`
        + '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ\n'
        + `${DEEPLINK_TOKEN}start=${questionId}`;
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.DEFAULT,
        questionId,
        header,
        text,
        options,
        reply,
        buttons: [],
      };
      return state;
    }

    case ACTIONS.HEARS_RESULTS: {
      const { userId, questionId, result } = action.payload;
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.DEFAULT,
        questionId,
        reply: result,
        buttons: [],
      };
      return state;
    }

    case ACTIONS.APPEND_MESSAGE_TO_QUEUE: {
      const { userId, messageId } = action.payload;
      state[userId] = {
        ...state[userId],
        clearMessagesQueue: [...(state[userId].clearMessagesQueue || []), messageId],
      };
      return state;
    }

    case ACTIONS.REMOVE_MESSAGE_FROM_QUEUE: {
      const { userId } = action.payload;
      state[userId] = {
        ...state[userId],
        clearMessagesQueue: [],
      };
      return state;
    }

    case ACTIONS.SHOW_ABOUT: {
      const { userId } = action.payload;
      state[userId] = {
        ...state[userId],
        type: STATES.DEFAULT,
        reply:
        '–í –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —É—á–∞—Å—Ç–Ω–∏–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, –∞ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.\n'
        + '–î–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ú–∞—Ä–∫—É—Å–æ–º –®—É–ª—å—Ü–µ.\n\n'
+ 'https://ru.wikipedia.org/wiki/–ü—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ_–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n'
        + 'https://ru.wikipedia.org/wiki/–ú–µ—Ç–æ–¥_–®—É–ª—å—Ü–µ',
        buttons: ['/new'],
      };
      return state;
    }

    case ACTIONS.MOCK: {
      const { userId } = action.payload;
      state[userId] = {
        ...state[userId],
        type: STATES.DEFAULT,
        reply: MOCK_MESSAGE,
        buttons: ['/new'],
      };
      return state;
    }

    default:
      return state;
  }
}

module.exports = botReducer;
