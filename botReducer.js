'use strict';

const { ACTIONS } = require('./action_types');
const { STATES } = require('./state_types');

function botReducer(state = {}, action) {
  switch (action.type) {
    case ACTIONS.CREATE_VOTE: {
      const { userId } = action.payload;
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.CREATE_HEADER,
        reply: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞',
        buttons: ['‚ùå Cancel'],
      };
      return state;
    }

    case ACTIONS.CREATE_HEADER: {
      const { userId, questionId, header } = action.payload;
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.CREATE_TEXT,
        questionId,
        header,
        reply: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞',
        buttons: ['‚ùå Cancel'],
      };
      return state;
    }

    case ACTIONS.CREATE_TEXT: {
      const { userId, text } = action.payload;
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.CREATE_OPTION,
        text,
        options: [],
        reply: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞',
        buttons: ['‚ùå Cancel'],
      };
      return state;
    }

    case ACTIONS.CREATE_OPTION: {
      const { userId, option } = action.payload;
      const options = [...(state[userId].options || []), option];
      const buttons = (options.length > 1) ? ['‚úîÔ∏è Done', '‚ùå Cancel'] : ['‚ùå Cancel'];
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.CREATE_OPTION,
        options,
        reply: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞',
        buttons,
      };
      return state;
    }

    case ACTIONS.CAST_VOTE: {
      console.log('VOTE action', action);
      const {
        userId,
        questionId,
        info,
        header,
        text,
        options,
        optionsSelected,
      } = action.payload;
      let reply;
      let buttons;
      if (options.length === 0) {
        reply = `–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å <b>${header}</b> \n–í–∞—à –≤—ã–±–æ—Ä:`;
        optionsSelected.forEach((option, index) => {
          reply += `\n${index + 1}. ${option.Name}`;
        });
        buttons = ['üëÅ Results'];
      } else {
        reply = `${header}\n${text}\n–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏:`;
        optionsSelected.forEach((option, index) => {
          reply += `\n${index + 1}. ${option.Name}`;
        });
        buttons = [...options.map(option => option.Name), '‚ùå Cancel'];
      }
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.ANSWER,
        questionId,
        info,
        options,
        optionsSelected,
        reply,
        buttons,
      };
      return state;
    }

    case ACTIONS.HEARS_CANCEL: {
      const { userId } = action.payload;
      let reply = '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ';
      switch (state[userId].type) {
        case STATES.CREATE_HEADER:
        case STATES.CREATE_TEXT:
        case STATES.CREATE_OPTION:
          reply = '–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ';
          break;
        case STATES.ANSWER:
          reply = '–£—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ';
          break;
      };
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.DEFAULT,
        reply,
        buttons: ['/new'],
      };
      return state;
    }

    case ACTIONS.HEARS_DONE: {
      const { userId, questionId, header, text, options } = action.payload;
      const reply = `–û–ø—Ä–æ—Å <b>${header}</b> —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\n`
        + '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ\n'
        + `https://telegram.me/prefVoteBot?start=${questionId}`;
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.DEFAULT,
        questionId,
        header,
        text,
        options,
        reply,
        buttons: [],
      };
      return state;
    }

    case ACTIONS.HEARS_RESULTS: {
      const { userId, questionId, result } = action.payload;
      state[userId] = {
        ...state[userId],
        userId,
        id: userId,
        type: STATES.DEFAULT,
        questionId,
        reply: result,
        buttons: [],
      };
      return state;
    }

    case ACTIONS.APPEND_MESSAGE_TO_QUEUE: {
      const { userId, message_id } = action.payload;
      console.log('ACTIONS.ADD_MESSAGE_TO_QUEUE state[userId]', state[userId]);
      state[userId] = {
        ...state[userId],
        clear_messages_queue: [...(state[userId].clear_messages_queue || []), message_id],
      };
      console.log('ACTIONS.ADD_MESSAGE_TO_QUEUE state[userId]', state[userId]);
      return state;
    }

    default:
      return state;
  }
}

module.exports = botReducer;
